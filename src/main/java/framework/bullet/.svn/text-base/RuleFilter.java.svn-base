/**
 * 
 */
package framework.bullet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;

import org.apache.commons.collections.CollectionUtils;

import project.utils.Connection;

import common.utils.ArrayUtils;
import common.utils.StringUtils;

import framework.bullet.utils.GroupBEFilter;
import framework.bullet.utils.GroupFEFilter;

/**
 * @author oleksii
 */
// TODO: Need to refactor
public class RuleFilter
{
	ProjectConfigReader reader;
	
	Properties ruleProperties;
	
	public RuleFilter()
	{
		reader = new ProjectConfigReader();
	}
	
	public Rule[] readRulesFile(String ruleFilePath)
	{
		try
		{
			ruleProperties = reader.readPropertiesFile(reader.getFileFromJar(ruleFilePath));
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		
		if (ruleProperties == null)
		{
			return null;
		}
		
		return convertPropertiesToRules();
	}
	
	private List<String> parsePropertiesRule(String properies)
	{
		String startPattern = "^\\$\\{";
		String endPattern = "}";
		String seperator = "}:${";
		
		return StringUtils.StrToList(StringUtils.StrReverse(StringUtils.StrReverse(
				properies.replaceFirst(startPattern, "")).replaceFirst(endPattern, "")), seperator);
	}
	
	private Rule createRule(String ruleName, List<String> referenceProperties)
	{
		Rule rule = new Rule();
		
		ArrayList<String> includes = new ArrayList<String>();
		
		for (String param : referenceProperties)
		{
			String value = ruleProperties.getProperty(param);
			includes.add(value);
		}
		
		String tmp = StringUtils.ListToStr(includes, " ");
		String[] incl = ArrayUtils.ListToArray(StringUtils.StrToList(tmp, " "));
		
		rule.setInclude(incl);
		rule.setName(ruleName);
		
		return rule;
	}
	
	private Rule[] convertPropertiesToRules()
	{
		Rule[] rules = {};
		List<String> lsBe = new ArrayList<String>();
		List<String> lsFe = new ArrayList<String>();
		
		String berule = ruleProperties.getProperty("rule.be.side.browsers");
		String ferule = ruleProperties.getProperty("rule.fe.side.browsers");
		
		lsBe = this.parsePropertiesRule(berule);
		lsFe = this.parsePropertiesRule(ferule);
		Rule be = this.createRule("be", lsBe);
		Rule fe = this.createRule("fe", lsFe);
		
		rules = new Rule[]
		{ be, fe };
		return rules;
	}
	
	@SuppressWarnings(
	{ "unchecked" })
	public List applyRules(List loInObj, Rule[] rules, Connection conn)
	{
		if (rules == null)
		{
			return loInObj;
		}
		
		String[] feBrowsers = {};
		String[] beBrowsers = {};
		
		for (Rule rule : rules)
		{
			String ruleName = rule.getName();
			if (ruleName.equalsIgnoreCase("fe"))
			{
				feBrowsers = rule.getInclude();
			}
			else if (ruleName.equalsIgnoreCase("be"))
			{
				beBrowsers = rule.getInclude();
			}
		}
		
		String browser = conn.getSeleniumBrowser();
		List fels = Arrays.asList(feBrowsers);
		List bels = Arrays.asList(beBrowsers);
		List ls = (List) CollectionUtils.intersection(bels, fels);
		
		if (fels.contains(browser) && ls.contains(browser))
		{
			CollectionUtils.filter(loInObj, new GroupBEFilter());
			return loInObj;
		}
		else if (fels.contains(browser))
		{
			CollectionUtils.filter(loInObj, new GroupFEFilter());
			return loInObj;
		}
		
		return loInObj;
	}
}
