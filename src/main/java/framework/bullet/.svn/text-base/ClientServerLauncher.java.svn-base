/**
 * 
 */
package framework.bullet;

import java.net.BindException;
import java.util.Hashtable;
import java.util.Map;

import org.drivers.ClientConfiguration;
import org.drivers.ClientDriver;
import org.drivers.CustomSelenium;
import org.openqa.selenium.server.RemoteControlConfiguration;
import org.openqa.selenium.server.SeleniumServer;

import com.thoughtworks.selenium.HttpCommandProcessor;
import com.thoughtworks.selenium.Selenium;
import com.thoughtworks.selenium.SeleniumException;
import common.Randomization;

/**
 * @author oleksii
 */
public class ClientServerLauncher
{
	private int									_iStartServerPort	 = 0;
	
	protected PortPool							 portPool			  = null;
	
	private Map<Integer, SeleniumServer>		   poolOfServers		 = new Hashtable<Integer, SeleniumServer>();
	
	private Map<ClientConfiguration, ClientDriver> poolOfClients		 = new Hashtable<ClientConfiguration, ClientDriver>();
	
	private static final int					   DEFAULT_PORT		  = 4444;
	
	private int									lastServerStartedPort = 0;
	
	/**
	 * Constructor:
	 * 
	 * <pre>
	 * 	If use this constructor server always start on 4444 port
	 * </pre>
	 * 
	 * @author oleksii.zozulenko
	 */
	public ClientServerLauncher()
	{
		setStartServerPort(DEFAULT_PORT);
		portPool = new PortPool();
		this.portPool.setFree(DEFAULT_PORT);
	}
	
	public ClientServerLauncher(int startPort)
	{
		setStartServerPort(startPort);
		portPool = new PortPool();
		
		this.portPool.setFree(startPort);
	}
	
	/**
	 * @function startServer
	 * 
	 *           <pre>
	 * &lt;b&gt;Description:&lt;/b&gt;&lt;br /&gt;
	 * Start server with specific configuration
	 * </pre>
	 * @author oleksii.zozulenko
	 * @param oServConfig
	 */
	public void startServer(RemoteControlConfiguration oServConfig)
	{
		try
		{
			
			int port = oServConfig.getPort();
			oServConfig.setUserJSInjection(true);
			
			if (this.portPool.isListen(port))
			{
				return;
			}
			
			SeleniumServer oServ = new SeleniumServer(oServConfig);
			
			oServ.start();
			Thread.sleep(2000);
			
			this.poolOfServers.put(port, oServ);
			
			lastServerStartedPort = port;
			portPool.setListen(port);
		}
		catch (BindException oEx)
		{
			String exceptionMessage = oEx.getMessage();
			
			if (exceptionMessage.contains("is already running on port")
					|| exceptionMessage.contains("Connection refused"))
			{
				int regenericPort = getGenericPort();
				oServConfig.setPort(regenericPort);
				startServer(oServConfig);
				lastServerStartedPort = regenericPort;
			}
			
			oEx.printStackTrace();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public Selenium getClient(java.lang.String serverHost, int serverPort,
			java.lang.String browserStartCommand, java.lang.String browserURL)
	{
		int port = 0;
		
		if (this.portPool.isListen(serverPort))
		{
			port = serverPort;
		}
		else
		{
			port = this.portPool.getFirstListenPort();
			
			if (port == 0)
			{
				throw new SeleniumException(
						"ERROR: All server ports busy! Could not contact to server!");
			}
		}
		
		this.portPool.setBusy(port);
		Selenium client = new CustomSelenium(serverHost, port, browserStartCommand, browserURL);
		return client;
	}
	
	public ClientDriver getClient(HttpCommandProcessor commandProccessor)
	{
		ClientDriver client = new CustomSelenium(commandProccessor);
		return client;
	}
	
	/**
	 * @function startServer
	 * 
	 *           <pre>
	 * &lt;b&gt;Description:&lt;/b&gt;&lt;br /&gt;
	 * Start server on non default port (setted as start server port)
	 * If port marked as busy or port continas in portPool server will not start
	 * </pre>
	 * @author oleksii.zozulenko
	 * @param port
	 */
	public void startServer(int port)
	{
		if (this.portPool.isListen(port) || this.portPool.isBusy(port))
		{
			return;
		}
		
		RemoteControlConfiguration oServConfig = new RemoteControlConfiguration();
		oServConfig.setPort(port);
		
		this.startServer(oServConfig);
	}
	
	/**
	 * @function startServer
	 * 
	 *           <pre>
	 * &lt;b&gt;Description:&lt;/b&gt;&lt;br /&gt;
	 * Function start SeleniumServer on port set as StartServerPort
	 * </pre>
	 * @author oleksii.zozulenko
	 */
	public void startServer()
	{
		this.startServer(getStartServerPort());
	}
	
	/**
	 * @function shutdownServer
	 * 
	 *           <pre>
	 * &lt;b&gt;Description:&lt;/b&gt;&lt;br /&gt;
	 * shutdown server listening on port
	 * </pre>
	 * @author oleksii.zozulenko
	 * @param port
	 */
	public void shutdownServer(int port)
	{
		if (this.poolOfServers.containsKey(port))
		{
			this.poolOfServers.get(port).stop();
			this.portPool.setFree(port);
			this.poolOfServers.remove(port);
		}
	}
	
	/**
	 * @function shutdownServers
	 * 
	 *           <pre>
	 * &lt;b&gt;Description:&lt;/b&gt;&lt;br /&gt;
	 * shutdown all launched servers
	 * </pre>
	 * @author oleksii.zozulenko
	 */
	public void shutdownServers()
	{
		for (Integer iPort : this.getPortPool().getAllPorts())
		{
			shutdownServer(iPort);
		}
	}
	
	protected void setStartServerPort(int iStartServerPort)
	{
		this._iStartServerPort = iStartServerPort;
	}
	
	protected int getStartServerPort()
	{
		return this._iStartServerPort;
	}
	
	public void setPortPool(Pool portPool)
	{
		this.portPool = (PortPool) portPool;
	}
	
	public PortPool getPortPool()
	{
		return portPool;
	}
	
	/**
	 * Function generate randomly port between DEFAULT_PORT and 2*DEFAULT_PORT
	 * 
	 * @return
	 */
	public int getGenericPort()
	{
		Randomization oRand = new Randomization();
		int iGenericPort = 0;
		do
		{
			iGenericPort = oRand.RandInt(DEFAULT_PORT, 2 * DEFAULT_PORT);
		}
		while (this.portPool.isAvailable(iGenericPort));
		
		this.portPool.setFree(iGenericPort);
		return iGenericPort;
	}
	
	/**
	 * Function start server on the port from client configuration. and assign client to this server
	 * 
	 * @param clientConfiguration
	 * @return
	 */
	public CustomSelenium startClientServer(ClientConfiguration clientConfiguration)
	{
		int port = clientConfiguration.getServerPort();
		if (this.portPool.isBusy(port))
		{
			port = this.getGenericPort();
		}
		this.portPool.setFree(port);
		
		this.startServer(port);
		
		CustomSelenium clientDriver = new CustomSelenium(clientConfiguration.getServerHost(),
				lastServerStartedPort, clientConfiguration.getBrowserStartCommand(),
				clientConfiguration.getBrowserURL());
		
		this.poolOfClients.put(clientConfiguration, (ClientDriver) clientDriver);
		
		return clientDriver;
	}
	
	public void shutdownClientServer(ClientConfiguration clientConfiguration)
	{
		Selenium client;
		int port = clientConfiguration.getServerPort();
		
		if (poolOfClients.containsKey(clientConfiguration))
		{
			client = this.poolOfClients.get(clientConfiguration);
			client.stop();
			this.poolOfClients.remove(clientConfiguration);
			this.portPool.setListen(port);
		}
		
		this.shutdownServer(port);
	}
	
	public Map<Integer, SeleniumServer> getPoolOfServers()
	{
		return poolOfServers;
	}
	
	public Map<ClientConfiguration, ClientDriver> getPoolOfClients()
	{
		return poolOfClients;
	}
	
	public int getLastServerStartedPort()
	{
		return lastServerStartedPort;
	}
	
	public void clearPools()
	{
		for (ClientConfiguration port : poolOfClients.keySet())
		{
			poolOfClients.get(port).stop();
			poolOfClients.remove(port);
		}
		poolOfClients.clear();
		
		for (Integer port : poolOfServers.keySet())
		{
			poolOfServers.get(port).stop();
			poolOfServers.remove(port);
		}
		
		poolOfServers.clear();
	}
}
